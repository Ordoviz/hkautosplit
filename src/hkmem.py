import os
import sys
import pymemlinux
from log import log

OFFSETSFILE = "PlayerData/V1568.txt"

class Offsets:
    # gamemanager
    ui_manager = 0xa0
    scene_name = 0x18
    next_scene = 0x20
    input_handler = 0x40
    achievement_handler = 0x50
    camera_ctrl = 0x80
    hero_ctrl = 0x88
    ui_manager = 0xa0
    player_data = 0xc8
    gamestate = 0x174
    tilemap_dirty = 0x1ab

    # input_handler
    debug_info = 0x60
    accepting_input = 0xa4

    # ui_manger
    ui_state   = 0x2a4

    # camera_controller
    cam_target = 0x48
    cam_mode = 0x6c
    cam_teleport = 0x77

    # camera_target
    cam_t_mode = 0x3c
    cam_dest = 0x40

    # hero_ctrl
    c_state = 0x210
    actor_state = 0x600
    transistion_state = 0x608
    hero_accepting = 0x6e7

    # hero_controller_states
    hazard_respawning = 0x2e

    version_string = 0x38


try:
    pid = int(os.popen("pgrep -i '^hollow[_ ]knight'").read().strip())
    pml = pymemlinux.PymemLinux(pid)
except ValueError:
    sys.exit('Make sure Hollow Knight is running before starting this autosplitter.')

# maps fields such as "lurienDefeated" to (offset, type)
playerOffsets: dict[str, tuple[int, str]] = {}
with open(OFFSETSFILE, "r", encoding="utf-8") as file:
    for line in file:
        [offset, name, type] = line.split(":")
        playerOffsets[name] = (int(offset, 16), type.rstrip('\n'))

UnityPlayer  = pml.module_base("UnityPlayer.so")
UnityPlayer2 = UnityPlayer + 0x1f22000
UnityPlayer3 = UnityPlayer + 0x1fbe000

lasti = -1  # used for nicer debug ouput

class HKmem:
    """Read values from Hollow Knight's memory"""
    def __init__(self):
        if pml.process_died():
            sys.exit("Hollow Knight died. Restart this autosplitter.")

        self._get_entities()

    def gamestate(self) -> int:
        return pml.read_uint(self._gamemanager + Offsets.gamestate)

    def tilemap_dirty(self) -> bool:
        return pml.read_bool(self._gamemanager + Offsets.tilemap_dirty)

    def ui_state(self) -> int:
        return pml.read_uint(self._ui_manager + Offsets.ui_state)

    def camera_teleporting(self) -> bool:
        return pml.read_bool(self._camera_ctrl + Offsets.cam_teleport)

    def hero_transitionstate(self) -> int:
        return pml.read_uint(self._hero_ctrl + Offsets.transistion_state)

    def hazard_respawning(self) -> bool:
        hero_ctrl_state = pml.read_pointer_64bit(self._hero_ctrl + Offsets.c_state)
        return pml.read_bool(hero_ctrl_state + Offsets.hazard_respawning)

    def accepting_input(self) -> bool:
        return pml.read_bool(self._inputhandler + Offsets.accepting_input)

    def scene_name(self) -> str:
        return pml.read_string(pml.read_pointer_64bit(self._gamemanager + Offsets.scene_name))

    def next_scene(self) -> str:
        return pml.read_string(pml.read_pointer_64bit(self._gamemanager + Offsets.next_scene))

    def playerdata(self, field: str):
        """Read value from player entity using the OFFSETSFILE"""
        (offset, type) = playerOffsets[field]
        match type:
            case "Boolean":
                return pml.read_bool(self._player_data + offset)
            case "Int32":
                return pml.read_uint(self._player_data + offset)
            case "String":
                # TODO: test
                return pml.read_string(self._player_data + offset)
            case "Single":
                return pml.read_float(self._player_data + offset)
            case "Completion":
                log.warning("Reading Completion player data is experimental")
                return pml.read_uint(self._player_data + offset) > 65791
            case "List<string>":
                log.warning("Reading List<string> player data is untested")
                list_ptr = pml.read_pointer_64bit(self._player_data + offset)
                array_ptr = pml.read_pointer_64bit(list_ptr + 0x10)
                array_size = pml.read_uint(array_ptr + 0x18)
                list = []
                for i in range(0, array_size):
                    item_offset = 0x18 + 8 * (i + 1)
                    item_ptr = pml.read_pointer_64bit(array_ptr + item_offset)
                    if item_ptr == 0:  # null pointer
                        continue
                    list.append(pml.read_string(item_ptr))
                return list
            case _:
                raise Exception(f"Reading a {type} is not implemented")

    def total_pale_ore_found(self) -> int:
        upgrades = self.playerdata("nailSmithUpgrades")
        ore_from_upgrades = (upgrades * (upgrades - 1)) / 2
        return ore_from_upgrades + self.playerdata("ore")

    def _entity(self, base: int, offsets: list[int]) -> int:
        """Start at a given base memory address and follow pointer path"""
        ent = base
        for offset in offsets:
            ent = pml.read_pointer_64bit(ent + offset)
        return ent

    def _get_entities(self) -> None:
        global lasti
        pointerpaths = [
            (3, [0x3a20, 0x170, 0x0, 0x0, 0x80, 0x10, 0x60]),
            (3, [0x3a20, 0x170, 0x0, 0x0, 0x80, 0x0, 0x38]),
            (3, [0x3a20, 0x170, 0x8, 0x8, 0x80, 0x10, 0x60]),
            (3, [0x3a70, 0x170, 0x0, 0x0, 0x80, 0x0, 0x38]),
            (3, [0x3a20, 0x170, 0x0, 0x80, 0x10, 0x10, 0x60]),
            (3, [0x3a70, 0x170, 0x0, 0x80, 0x10, 0x10, 0x60]),
            (3, [0x3a70, 0x170, 0x8, 0x8, 0x80, 0x10, 0x60]),
            (3, [0x3a70, 0x170, 0x0, 0x0, 0x80, 0x10, 0x60]),
            (3, [0x1bf8, 0x60, 0xa8, 0x10, 0x40, 0x60, 0x18]),
            (3, [0x8530, 0x60, 0xa8, 0x10, 0x40, 0x60, 0x18]),
            (2, [0x96210, 0x68, 0x10, 0x100, 0x28, 0x68, 0x1e0]),
            (2, [0x96210, 0x68, 0x18, 0x100, 0x28, 0x68, 0x1e0]),
            (3, [0x3a20, 0x170, 0x0, 0x10, 0x90, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x10, 0x90, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x48, 0x90, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x48, 0x90, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x70, 0xa0, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x70, 0xa0, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x10, 0xa8, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x10, 0xa8, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x48, 0xa8, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x48, 0xa8, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x70, 0xb8, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x70, 0xb8, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x10, 0xc0, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x10, 0xc0, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x48, 0xc0, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x48, 0xc0, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x70, 0xd0, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x70, 0xd0, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x10, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x10, 0x28, 0x18]),
            (3, [0x3a20, 0x8, 0x180, 0x0, 0x10, 0x28, 0x18]),
            (3, [0x3a70, 0x8, 0x180, 0x0, 0x10, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x48, 0xd8, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x48, 0xd8, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x48, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x48, 0x28, 0x18]),
            (3, [0x3a20, 0x8, 0x180, 0x0, 0x48, 0x28, 0x18]),
            (3, [0x3a70, 0x8, 0x180, 0x0, 0x48, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x10, 0x110, 0x28, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x10, 0x110, 0x28, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x98, 0x0, 0x38, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x98, 0x0, 0x38, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x70, 0x38, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x70, 0x38, 0x18]),
            (3, [0x3a20, 0x8, 0x180, 0x0, 0x70, 0x38, 0x18]),
            (3, [0x3a70, 0x8, 0x180, 0x0, 0x70, 0x38, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x70, 0x0, 0x60, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x70, 0x0, 0x60, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x80, 0x28, 0x60, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x80, 0x28, 0x60, 0x18]),
            (3, [0x3a20, 0x170, 0x8, 0x8, 0x98, 0x60, 0x18]),
            (3, [0x3a70, 0x170, 0x8, 0x8, 0x98, 0x60, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x0, 0x98, 0x60, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x0, 0x98, 0x60, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x98, 0x10, 0x60, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x98, 0x10, 0x60, 0x18]),
            (3, [0x3a20, 0x170, 0x0, 0x80, 0x60, 0x18]),
            (3, [0x3a70, 0x170, 0x0, 0x80, 0x60, 0x18]),
            (3, [0x3a20, 0x8, 0x180, 0x0, 0x80, 0x60, 0x18]),
            (3, [0x3a70, 0x8, 0x180, 0x0, 0x80, 0x60, 0x18]),
            (3, [0x3a20, 0x170, 0x8, 0x8, 0x48, 0x28, 0x20]),
            (3, [0x3a70, 0x170, 0x8, 0x8, 0x48, 0x28, 0x20]),
            (3, [0x3a20, 0x170, 0x0, 0x0, 0x48, 0x28, 0x20]),
            (3, [0x3a70, 0x170, 0x0, 0x0, 0x48, 0x28, 0x20]),
            (2, [0x96210, 0x68, 0x10, 0x38, 0xf0, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x18, 0x38, 0xf0, 0x28, 0x70]),
            (2, [0x95190, 0x50, 0x48, 0x10, 0x100, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x10, 0x100, 0x28, 0x70]),
            (2, [0x96210, 0x28, 0x68, 0x10, 0x100, 0x28, 0x70]),
            (2, [0x960a0, 0x50, 0xa0, 0x10, 0x100, 0x28, 0x70]),
            (2, [0x96210, 0x48, 0xa0, 0x10, 0x100, 0x28, 0x70]),
            (2, [0x95190, 0x50, 0x48, 0x18, 0x100, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x18, 0x100, 0x28, 0x70]),
            (2, [0x96210, 0x28, 0x68, 0x18, 0x100, 0x28, 0x70]),
            (2, [0x960a0, 0x50, 0xa0, 0x18, 0x100, 0x28, 0x70]),
            (2, [0x96210, 0x48, 0xa0, 0x18, 0x100, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x10, 0x100, 0x90, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x18, 0x100, 0x90, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x10, 0x100, 0xa8, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x18, 0x100, 0xa8, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x10, 0x100, 0xc0, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x18, 0x100, 0xc0, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x10, 0x100, 0xd8, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x18, 0x100, 0xd8, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x10, 0x100, 0x110, 0x28, 0x70]),
            (2, [0x96210, 0x68, 0x18, 0x100, 0x110, 0x28, 0x70]),
            (3, [0x3a20, 0x170, 0x0, 0x80, 0x10, 0x60, 0x20]),
            (3, [0x3a70, 0x170, 0x0, 0x80, 0x10, 0x60, 0x20]),
            (3, [0x3a20, 0x170, 0x8, 0x8, 0x80, 0x60, 0x20]),
            (3, [0x3a70, 0x170, 0x8, 0x8, 0x80, 0x60, 0x20]),
            (3, [0x3a20, 0x170, 0x0, 0x0, 0x80, 0x60, 0x20]),
            (3, [0x3a70, 0x170, 0x0, 0x0, 0x80, 0x60, 0x20]),
        ]
        i = 0
        for (base, pointerpath) in pointerpaths:
            i = i + 1
            try:
                self._gamemanager = self._entity(UnityPlayer2 if base == 2 else UnityPlayer3, pointerpath)
                self._ui_manager  = pml.read_pointer_64bit(self._gamemanager + Offsets.ui_manager)
                if self._ui_manager == 0:  # Modding API is installed
                    Offsets.gamestate = 0x184
                    Offsets.tilemap_dirty = 0x1bb
                    Offsets.ui_state = 0x2ac
                    # Offsets.menu_state = 0x2b0
                    Offsets.ui_manager = 0x178
                    self._ui_manager  = pml.read_pointer_64bit(self._gamemanager + Offsets.ui_manager)

                self._player_data  = pml.read_pointer_64bit(self._gamemanager + Offsets.player_data)
                self._camera_ctrl  = pml.read_pointer_64bit(self._gamemanager + Offsets.camera_ctrl)
                self._hero_ctrl    = pml.read_pointer_64bit(self._gamemanager + Offsets.hero_ctrl)
                self._inputhandler = pml.read_pointer_64bit(self._gamemanager + Offsets.input_handler)

                # sanity checks:
                assert 0 <= self.gamestate() < 9
                _ = self.scene_name()
                _ = self.next_scene()

                # Convert pointerpath array into string:
                stringified = "["
                for off in pointerpath:
                    stringified += hex(off) + ", "
                stringified = stringified[:-2] + ']'

                if i != lasti:
                    log.debug(f"Using pointerpath {i} with base {base} and offsets {stringified}")
                    lasti = i
                return
            except (AssertionError, OSError, UnicodeDecodeError, TypeError):
                continue  # try next pointerpath

        log.debug("No pointerpath works")
        raise OSError()
